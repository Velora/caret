/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/dotenv/package.json
var require_package = __commonJS({
  "node_modules/dotenv/package.json"(exports, module2) {
    module2.exports = {
      name: "dotenv",
      version: "16.4.5",
      description: "Loads environment variables from .env file",
      main: "lib/main.js",
      types: "lib/main.d.ts",
      exports: {
        ".": {
          types: "./lib/main.d.ts",
          require: "./lib/main.js",
          default: "./lib/main.js"
        },
        "./config": "./config.js",
        "./config.js": "./config.js",
        "./lib/env-options": "./lib/env-options.js",
        "./lib/env-options.js": "./lib/env-options.js",
        "./lib/cli-options": "./lib/cli-options.js",
        "./lib/cli-options.js": "./lib/cli-options.js",
        "./package.json": "./package.json"
      },
      scripts: {
        "dts-check": "tsc --project tests/types/tsconfig.json",
        lint: "standard",
        "lint-readme": "standard-markdown",
        pretest: "npm run lint && npm run dts-check",
        test: "tap tests/*.js --100 -Rspec",
        "test:coverage": "tap --coverage-report=lcov",
        prerelease: "npm test",
        release: "standard-version"
      },
      repository: {
        type: "git",
        url: "git://github.com/motdotla/dotenv.git"
      },
      funding: "https://dotenvx.com",
      keywords: [
        "dotenv",
        "env",
        ".env",
        "environment",
        "variables",
        "config",
        "settings"
      ],
      readmeFilename: "README.md",
      license: "BSD-2-Clause",
      devDependencies: {
        "@definitelytyped/dtslint": "^0.0.133",
        "@types/node": "^18.11.3",
        decache: "^4.6.1",
        sinon: "^14.0.1",
        standard: "^17.0.0",
        "standard-markdown": "^7.1.0",
        "standard-version": "^9.5.0",
        tap: "^16.3.0",
        tar: "^6.1.11",
        typescript: "^4.8.4"
      },
      engines: {
        node: ">=12"
      },
      browser: {
        fs: false
      }
    };
  }
});

// node_modules/dotenv/lib/main.js
var require_main = __commonJS({
  "node_modules/dotenv/lib/main.js"(exports, module2) {
    var fs = require("fs");
    var path = require("path");
    var os = require("os");
    var crypto = require("crypto");
    var packageJson = require_package();
    var version = packageJson.version;
    var LINE = /(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;
    function parse(src) {
      const obj = {};
      let lines = src.toString();
      lines = lines.replace(/\r\n?/mg, "\n");
      let match;
      while ((match = LINE.exec(lines)) != null) {
        const key = match[1];
        let value = match[2] || "";
        value = value.trim();
        const maybeQuote = value[0];
        value = value.replace(/^(['"`])([\s\S]*)\1$/mg, "$2");
        if (maybeQuote === '"') {
          value = value.replace(/\\n/g, "\n");
          value = value.replace(/\\r/g, "\r");
        }
        obj[key] = value;
      }
      return obj;
    }
    function _parseVault(options) {
      const vaultPath = _vaultPath(options);
      const result = DotenvModule.configDotenv({ path: vaultPath });
      if (!result.parsed) {
        const err = new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`);
        err.code = "MISSING_DATA";
        throw err;
      }
      const keys = _dotenvKey(options).split(",");
      const length = keys.length;
      let decrypted;
      for (let i = 0; i < length; i++) {
        try {
          const key = keys[i].trim();
          const attrs = _instructions(result, key);
          decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key);
          break;
        } catch (error) {
          if (i + 1 >= length) {
            throw error;
          }
        }
      }
      return DotenvModule.parse(decrypted);
    }
    function _log(message) {
      console.log(`[dotenv@${version}][INFO] ${message}`);
    }
    function _warn(message) {
      console.log(`[dotenv@${version}][WARN] ${message}`);
    }
    function _debug(message) {
      console.log(`[dotenv@${version}][DEBUG] ${message}`);
    }
    function _dotenvKey(options) {
      if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {
        return options.DOTENV_KEY;
      }
      if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {
        return process.env.DOTENV_KEY;
      }
      return "";
    }
    function _instructions(result, dotenvKey) {
      let uri;
      try {
        uri = new URL(dotenvKey);
      } catch (error) {
        if (error.code === "ERR_INVALID_URL") {
          const err = new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");
          err.code = "INVALID_DOTENV_KEY";
          throw err;
        }
        throw error;
      }
      const key = uri.password;
      if (!key) {
        const err = new Error("INVALID_DOTENV_KEY: Missing key part");
        err.code = "INVALID_DOTENV_KEY";
        throw err;
      }
      const environment = uri.searchParams.get("environment");
      if (!environment) {
        const err = new Error("INVALID_DOTENV_KEY: Missing environment part");
        err.code = "INVALID_DOTENV_KEY";
        throw err;
      }
      const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`;
      const ciphertext = result.parsed[environmentKey];
      if (!ciphertext) {
        const err = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`);
        err.code = "NOT_FOUND_DOTENV_ENVIRONMENT";
        throw err;
      }
      return { ciphertext, key };
    }
    function _vaultPath(options) {
      let possibleVaultPath = null;
      if (options && options.path && options.path.length > 0) {
        if (Array.isArray(options.path)) {
          for (const filepath of options.path) {
            if (fs.existsSync(filepath)) {
              possibleVaultPath = filepath.endsWith(".vault") ? filepath : `${filepath}.vault`;
            }
          }
        } else {
          possibleVaultPath = options.path.endsWith(".vault") ? options.path : `${options.path}.vault`;
        }
      } else {
        possibleVaultPath = path.resolve(process.cwd(), ".env.vault");
      }
      if (fs.existsSync(possibleVaultPath)) {
        return possibleVaultPath;
      }
      return null;
    }
    function _resolveHome(envPath) {
      return envPath[0] === "~" ? path.join(os.homedir(), envPath.slice(1)) : envPath;
    }
    function _configVault(options) {
      _log("Loading env from encrypted .env.vault");
      const parsed = DotenvModule._parseVault(options);
      let processEnv = process.env;
      if (options && options.processEnv != null) {
        processEnv = options.processEnv;
      }
      DotenvModule.populate(processEnv, parsed, options);
      return { parsed };
    }
    function configDotenv(options) {
      const dotenvPath = path.resolve(process.cwd(), ".env");
      let encoding = "utf8";
      const debug2 = Boolean(options && options.debug);
      if (options && options.encoding) {
        encoding = options.encoding;
      } else {
        if (debug2) {
          _debug("No encoding is specified. UTF-8 is used by default");
        }
      }
      let optionPaths = [dotenvPath];
      if (options && options.path) {
        if (!Array.isArray(options.path)) {
          optionPaths = [_resolveHome(options.path)];
        } else {
          optionPaths = [];
          for (const filepath of options.path) {
            optionPaths.push(_resolveHome(filepath));
          }
        }
      }
      let lastError;
      const parsedAll = {};
      for (const path2 of optionPaths) {
        try {
          const parsed = DotenvModule.parse(fs.readFileSync(path2, { encoding }));
          DotenvModule.populate(parsedAll, parsed, options);
        } catch (e) {
          if (debug2) {
            _debug(`Failed to load ${path2} ${e.message}`);
          }
          lastError = e;
        }
      }
      let processEnv = process.env;
      if (options && options.processEnv != null) {
        processEnv = options.processEnv;
      }
      DotenvModule.populate(processEnv, parsedAll, options);
      if (lastError) {
        return { parsed: parsedAll, error: lastError };
      } else {
        return { parsed: parsedAll };
      }
    }
    function config2(options) {
      if (_dotenvKey(options).length === 0) {
        return DotenvModule.configDotenv(options);
      }
      const vaultPath = _vaultPath(options);
      if (!vaultPath) {
        _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`);
        return DotenvModule.configDotenv(options);
      }
      return DotenvModule._configVault(options);
    }
    function decrypt(encrypted, keyStr) {
      const key = Buffer.from(keyStr.slice(-64), "hex");
      let ciphertext = Buffer.from(encrypted, "base64");
      const nonce = ciphertext.subarray(0, 12);
      const authTag = ciphertext.subarray(-16);
      ciphertext = ciphertext.subarray(12, -16);
      try {
        const aesgcm = crypto.createDecipheriv("aes-256-gcm", key, nonce);
        aesgcm.setAuthTag(authTag);
        return `${aesgcm.update(ciphertext)}${aesgcm.final()}`;
      } catch (error) {
        const isRange = error instanceof RangeError;
        const invalidKeyLength = error.message === "Invalid key length";
        const decryptionFailed = error.message === "Unsupported state or unable to authenticate data";
        if (isRange || invalidKeyLength) {
          const err = new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");
          err.code = "INVALID_DOTENV_KEY";
          throw err;
        } else if (decryptionFailed) {
          const err = new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");
          err.code = "DECRYPTION_FAILED";
          throw err;
        } else {
          throw error;
        }
      }
    }
    function populate(processEnv, parsed, options = {}) {
      const debug2 = Boolean(options && options.debug);
      const override = Boolean(options && options.override);
      if (typeof parsed !== "object") {
        const err = new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");
        err.code = "OBJECT_REQUIRED";
        throw err;
      }
      for (const key of Object.keys(parsed)) {
        if (Object.prototype.hasOwnProperty.call(processEnv, key)) {
          if (override === true) {
            processEnv[key] = parsed[key];
          }
          if (debug2) {
            if (override === true) {
              _debug(`"${key}" is already defined and WAS overwritten`);
            } else {
              _debug(`"${key}" is already defined and was NOT overwritten`);
            }
          }
        } else {
          processEnv[key] = parsed[key];
        }
      }
    }
    var DotenvModule = {
      configDotenv,
      _configVault,
      _parseVault,
      config: config2,
      decrypt,
      parse,
      populate
    };
    module2.exports.configDotenv = DotenvModule.configDotenv;
    module2.exports._configVault = DotenvModule._configVault;
    module2.exports._parseVault = DotenvModule._parseVault;
    module2.exports.config = DotenvModule.config;
    module2.exports.decrypt = DotenvModule.decrypt;
    module2.exports.parse = DotenvModule.parse;
    module2.exports.populate = DotenvModule.populate;
    module2.exports = DotenvModule;
  }
});

// main.ts
var main_exports = {};
__export(main_exports, {
  CMDJModal: () => CMDJModal,
  VIEW_NAME_MAIN_CHAT: () => VIEW_NAME_MAIN_CHAT,
  VIEW_NAME_SIDEBAR_CHAT: () => VIEW_NAME_SIDEBAR_CHAT,
  default: () => MyPlugin,
  redBackgroundField: () => redBackgroundField
});
module.exports = __toCommonJS(main_exports);

// node_modules/groq-sdk/version.mjs
var VERSION = "0.3.3";

// node_modules/groq-sdk/_shims/registry.mjs
var auto = false;
var kind = void 0;
var fetch2 = void 0;
var Request2 = void 0;
var Response2 = void 0;
var Headers2 = void 0;
var FormData2 = void 0;
var Blob2 = void 0;
var File2 = void 0;
var ReadableStream2 = void 0;
var getMultipartRequestOptions = void 0;
var getDefaultAgent = void 0;
var fileFromPath = void 0;
var isFsReadStream = void 0;
function setShims(shims, options = { auto: false }) {
  if (auto) {
    throw new Error(`you must \`import 'groq-sdk/shims/${shims.kind}'\` before importing anything else from groq-sdk`);
  }
  if (kind) {
    throw new Error(`can't \`import 'groq-sdk/shims/${shims.kind}'\` after \`import 'groq-sdk/shims/${kind}'\``);
  }
  auto = options.auto;
  kind = shims.kind;
  fetch2 = shims.fetch;
  Request2 = shims.Request;
  Response2 = shims.Response;
  Headers2 = shims.Headers;
  FormData2 = shims.FormData;
  Blob2 = shims.Blob;
  File2 = shims.File;
  ReadableStream2 = shims.ReadableStream;
  getMultipartRequestOptions = shims.getMultipartRequestOptions;
  getDefaultAgent = shims.getDefaultAgent;
  fileFromPath = shims.fileFromPath;
  isFsReadStream = shims.isFsReadStream;
}

// node_modules/groq-sdk/_shims/MultipartBody.mjs
var MultipartBody = class {
  constructor(body) {
    this.body = body;
  }
  get [Symbol.toStringTag]() {
    return "MultipartBody";
  }
};

// node_modules/groq-sdk/_shims/web-runtime.mjs
function getRuntime({ manuallyImported } = {}) {
  const recommendation = manuallyImported ? `You may need to use polyfills` : `Add one of these imports before your first \`import \u2026 from 'groq-sdk'\`:
- \`import 'groq-sdk/shims/node'\` (if you're running on Node)
- \`import 'groq-sdk/shims/web'\` (otherwise)
`;
  let _fetch, _Request, _Response, _Headers;
  try {
    _fetch = fetch;
    _Request = Request;
    _Response = Response;
    _Headers = Headers;
  } catch (error) {
    throw new Error(`this environment is missing the following Web Fetch API type: ${error.message}. ${recommendation}`);
  }
  return {
    kind: "web",
    fetch: _fetch,
    Request: _Request,
    Response: _Response,
    Headers: _Headers,
    FormData: (
      // @ts-ignore
      typeof FormData !== "undefined" ? FormData : class FormData {
        // @ts-ignore
        constructor() {
          throw new Error(`file uploads aren't supported in this environment yet as 'FormData' is undefined. ${recommendation}`);
        }
      }
    ),
    Blob: typeof Blob !== "undefined" ? Blob : class Blob {
      constructor() {
        throw new Error(`file uploads aren't supported in this environment yet as 'Blob' is undefined. ${recommendation}`);
      }
    },
    File: (
      // @ts-ignore
      typeof File !== "undefined" ? File : class File {
        // @ts-ignore
        constructor() {
          throw new Error(`file uploads aren't supported in this environment yet as 'File' is undefined. ${recommendation}`);
        }
      }
    ),
    ReadableStream: (
      // @ts-ignore
      typeof ReadableStream !== "undefined" ? ReadableStream : class ReadableStream {
        // @ts-ignore
        constructor() {
          throw new Error(`streaming isn't supported in this environment yet as 'ReadableStream' is undefined. ${recommendation}`);
        }
      }
    ),
    getMultipartRequestOptions: async (form, opts) => ({
      ...opts,
      body: new MultipartBody(form)
    }),
    getDefaultAgent: (url) => void 0,
    fileFromPath: () => {
      throw new Error("The `fileFromPath` function is only supported in Node. See the README for more details: https://www.github.com/groq/groq-typescript#file-uploads");
    },
    isFsReadStream: (value) => false
  };
}

// node_modules/groq-sdk/_shims/index.mjs
if (!kind)
  setShims(getRuntime(), { auto: true });

// node_modules/groq-sdk/error.mjs
var error_exports = {};
__export(error_exports, {
  APIConnectionError: () => APIConnectionError,
  APIConnectionTimeoutError: () => APIConnectionTimeoutError,
  APIError: () => APIError,
  APIUserAbortError: () => APIUserAbortError,
  AuthenticationError: () => AuthenticationError,
  BadRequestError: () => BadRequestError,
  ConflictError: () => ConflictError,
  GroqError: () => GroqError,
  InternalServerError: () => InternalServerError,
  NotFoundError: () => NotFoundError,
  PermissionDeniedError: () => PermissionDeniedError,
  RateLimitError: () => RateLimitError,
  UnprocessableEntityError: () => UnprocessableEntityError
});
var GroqError = class extends Error {
};
var APIError = class extends GroqError {
  constructor(status, error, message, headers) {
    super(`${APIError.makeMessage(status, error, message)}`);
    this.status = status;
    this.headers = headers;
    this.error = error;
  }
  static makeMessage(status, error, message) {
    const msg = (error == null ? void 0 : error.message) ? typeof error.message === "string" ? error.message : JSON.stringify(error.message) : error ? JSON.stringify(error) : message;
    if (status && msg) {
      return `${status} ${msg}`;
    }
    if (status) {
      return `${status} status code (no body)`;
    }
    if (msg) {
      return msg;
    }
    return "(no status code or body)";
  }
  static generate(status, errorResponse, message, headers) {
    if (!status) {
      return new APIConnectionError({ cause: castToError(errorResponse) });
    }
    const error = errorResponse;
    if (status === 400) {
      return new BadRequestError(status, error, message, headers);
    }
    if (status === 401) {
      return new AuthenticationError(status, error, message, headers);
    }
    if (status === 403) {
      return new PermissionDeniedError(status, error, message, headers);
    }
    if (status === 404) {
      return new NotFoundError(status, error, message, headers);
    }
    if (status === 409) {
      return new ConflictError(status, error, message, headers);
    }
    if (status === 422) {
      return new UnprocessableEntityError(status, error, message, headers);
    }
    if (status === 429) {
      return new RateLimitError(status, error, message, headers);
    }
    if (status >= 500) {
      return new InternalServerError(status, error, message, headers);
    }
    return new APIError(status, error, message, headers);
  }
};
var APIUserAbortError = class extends APIError {
  constructor({ message } = {}) {
    super(void 0, void 0, message || "Request was aborted.", void 0);
    this.status = void 0;
  }
};
var APIConnectionError = class extends APIError {
  constructor({ message, cause }) {
    super(void 0, void 0, message || "Connection error.", void 0);
    this.status = void 0;
    if (cause)
      this.cause = cause;
  }
};
var APIConnectionTimeoutError = class extends APIConnectionError {
  constructor({ message } = {}) {
    super({ message: message != null ? message : "Request timed out." });
  }
};
var BadRequestError = class extends APIError {
  constructor() {
    super(...arguments);
    this.status = 400;
  }
};
var AuthenticationError = class extends APIError {
  constructor() {
    super(...arguments);
    this.status = 401;
  }
};
var PermissionDeniedError = class extends APIError {
  constructor() {
    super(...arguments);
    this.status = 403;
  }
};
var NotFoundError = class extends APIError {
  constructor() {
    super(...arguments);
    this.status = 404;
  }
};
var ConflictError = class extends APIError {
  constructor() {
    super(...arguments);
    this.status = 409;
  }
};
var UnprocessableEntityError = class extends APIError {
  constructor() {
    super(...arguments);
    this.status = 422;
  }
};
var RateLimitError = class extends APIError {
  constructor() {
    super(...arguments);
    this.status = 429;
  }
};
var InternalServerError = class extends APIError {
};

// node_modules/groq-sdk/lib/streaming.mjs
var Stream = class {
  constructor(iterator, controller) {
    this.iterator = iterator;
    this.controller = controller;
  }
  static fromSSEResponse(response, controller) {
    let consumed = false;
    const decoder = new SSEDecoder();
    async function* iterMessages() {
      if (!response.body) {
        controller.abort();
        throw new GroqError(`Attempted to iterate over a response with no body`);
      }
      const lineDecoder = new LineDecoder();
      const iter = readableStreamAsyncIterable(response.body);
      for await (const chunk of iter) {
        for (const line of lineDecoder.decode(chunk)) {
          const sse = decoder.decode(line);
          if (sse)
            yield sse;
        }
      }
      for (const line of lineDecoder.flush()) {
        const sse = decoder.decode(line);
        if (sse)
          yield sse;
      }
    }
    async function* iterator() {
      if (consumed) {
        throw new Error("Cannot iterate over a consumed stream, use `.tee()` to split the stream.");
      }
      consumed = true;
      let done = false;
      try {
        for await (const sse of iterMessages()) {
          if (done)
            continue;
          if (sse.data.startsWith("[DONE]")) {
            done = true;
            continue;
          }
          if (sse.event === null) {
            let data;
            try {
              data = JSON.parse(sse.data);
            } catch (e) {
              console.error(`Could not parse message into JSON:`, sse.data);
              console.error(`From chunk:`, sse.raw);
              throw e;
            }
            if (data && data.error) {
              throw new APIError(void 0, data.error, void 0, void 0);
            }
            yield data;
          }
        }
        done = true;
      } catch (e) {
        if (e instanceof Error && e.name === "AbortError")
          return;
        throw e;
      } finally {
        if (!done)
          controller.abort();
      }
    }
    return new Stream(iterator, controller);
  }
  /**
   * Generates a Stream from a newline-separated ReadableStream
   * where each item is a JSON value.
   */
  static fromReadableStream(readableStream, controller) {
    let consumed = false;
    async function* iterLines() {
      const lineDecoder = new LineDecoder();
      const iter = readableStreamAsyncIterable(readableStream);
      for await (const chunk of iter) {
        for (const line of lineDecoder.decode(chunk)) {
          yield line;
        }
      }
      for (const line of lineDecoder.flush()) {
        yield line;
      }
    }
    async function* iterator() {
      if (consumed) {
        throw new Error("Cannot iterate over a consumed stream, use `.tee()` to split the stream.");
      }
      consumed = true;
      let done = false;
      try {
        for await (const line of iterLines()) {
          if (done)
            continue;
          if (line)
            yield JSON.parse(line);
        }
        done = true;
      } catch (e) {
        if (e instanceof Error && e.name === "AbortError")
          return;
        throw e;
      } finally {
        if (!done)
          controller.abort();
      }
    }
    return new Stream(iterator, controller);
  }
  [Symbol.asyncIterator]() {
    return this.iterator();
  }
  /**
   * Splits the stream into two streams which can be
   * independently read from at different speeds.
   */
  tee() {
    const left = [];
    const right = [];
    const iterator = this.iterator();
    const teeIterator = (queue) => {
      return {
        next: () => {
          if (queue.length === 0) {
            const result = iterator.next();
            left.push(result);
            right.push(result);
          }
          return queue.shift();
        }
      };
    };
    return [
      new Stream(() => teeIterator(left), this.controller),
      new Stream(() => teeIterator(right), this.controller)
    ];
  }
  /**
   * Converts this stream to a newline-separated ReadableStream of
   * JSON stringified values in the stream
   * which can be turned back into a Stream with `Stream.fromReadableStream()`.
   */
  toReadableStream() {
    const self = this;
    let iter;
    const encoder = new TextEncoder();
    return new ReadableStream2({
      async start() {
        iter = self[Symbol.asyncIterator]();
      },
      async pull(ctrl) {
        try {
          const { value, done } = await iter.next();
          if (done)
            return ctrl.close();
          const bytes = encoder.encode(JSON.stringify(value) + "\n");
          ctrl.enqueue(bytes);
        } catch (err) {
          ctrl.error(err);
        }
      },
      async cancel() {
        var _a2;
        await ((_a2 = iter.return) == null ? void 0 : _a2.call(iter));
      }
    });
  }
};
var SSEDecoder = class {
  constructor() {
    this.event = null;
    this.data = [];
    this.chunks = [];
  }
  decode(line) {
    if (line.endsWith("\r")) {
      line = line.substring(0, line.length - 1);
    }
    if (!line) {
      if (!this.event && !this.data.length)
        return null;
      const sse = {
        event: this.event,
        data: this.data.join("\n"),
        raw: this.chunks
      };
      this.event = null;
      this.data = [];
      this.chunks = [];
      return sse;
    }
    this.chunks.push(line);
    if (line.startsWith(":")) {
      return null;
    }
    let [fieldname, _, value] = partition(line, ":");
    if (value.startsWith(" ")) {
      value = value.substring(1);
    }
    if (fieldname === "event") {
      this.event = value;
    } else if (fieldname === "data") {
      this.data.push(value);
    }
    return null;
  }
};
var LineDecoder = class {
  constructor() {
    this.buffer = [];
    this.trailingCR = false;
  }
  decode(chunk) {
    let text = this.decodeText(chunk);
    if (this.trailingCR) {
      text = "\r" + text;
      this.trailingCR = false;
    }
    if (text.endsWith("\r")) {
      this.trailingCR = true;
      text = text.slice(0, -1);
    }
    if (!text) {
      return [];
    }
    const trailingNewline = LineDecoder.NEWLINE_CHARS.has(text[text.length - 1] || "");
    let lines = text.split(LineDecoder.NEWLINE_REGEXP);
    if (lines.length === 1 && !trailingNewline) {
      this.buffer.push(lines[0]);
      return [];
    }
    if (this.buffer.length > 0) {
      lines = [this.buffer.join("") + lines[0], ...lines.slice(1)];
      this.buffer = [];
    }
    if (!trailingNewline) {
      this.buffer = [lines.pop() || ""];
    }
    return lines;
  }
  decodeText(bytes) {
    var _a2;
    if (bytes == null)
      return "";
    if (typeof bytes === "string")
      return bytes;
    if (typeof Buffer !== "undefined") {
      if (bytes instanceof Buffer) {
        return bytes.toString();
      }
      if (bytes instanceof Uint8Array) {
        return Buffer.from(bytes).toString();
      }
      throw new GroqError(`Unexpected: received non-Uint8Array (${bytes.constructor.name}) stream chunk in an environment with a global "Buffer" defined, which this library assumes to be Node. Please report this error.`);
    }
    if (typeof TextDecoder !== "undefined") {
      if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {
        (_a2 = this.textDecoder) != null ? _a2 : this.textDecoder = new TextDecoder("utf8");
        return this.textDecoder.decode(bytes);
      }
      throw new GroqError(`Unexpected: received non-Uint8Array/ArrayBuffer (${bytes.constructor.name}) in a web platform. Please report this error.`);
    }
    throw new GroqError(`Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.`);
  }
  flush() {
    if (!this.buffer.length && !this.trailingCR) {
      return [];
    }
    const lines = [this.buffer.join("")];
    this.buffer = [];
    this.trailingCR = false;
    return lines;
  }
};
LineDecoder.NEWLINE_CHARS = /* @__PURE__ */ new Set(["\n", "\r", "\v", "\f", "", "", "", "\x85", "\u2028", "\u2029"]);
LineDecoder.NEWLINE_REGEXP = /\r\n|[\n\r\x0b\x0c\x1c\x1d\x1e\x85\u2028\u2029]/g;
function partition(str, delimiter) {
  const index = str.indexOf(delimiter);
  if (index !== -1) {
    return [str.substring(0, index), delimiter, str.substring(index + delimiter.length)];
  }
  return [str, "", ""];
}
function readableStreamAsyncIterable(stream) {
  if (stream[Symbol.asyncIterator])
    return stream;
  const reader = stream.getReader();
  return {
    async next() {
      try {
        const result = await reader.read();
        if (result == null ? void 0 : result.done)
          reader.releaseLock();
        return result;
      } catch (e) {
        reader.releaseLock();
        throw e;
      }
    },
    async return() {
      const cancelPromise = reader.cancel();
      reader.releaseLock();
      await cancelPromise;
      return { done: true, value: void 0 };
    },
    [Symbol.asyncIterator]() {
      return this;
    }
  };
}

// node_modules/groq-sdk/uploads.mjs
var isResponseLike = (value) => value != null && typeof value === "object" && typeof value.url === "string" && typeof value.blob === "function";
var isFileLike = (value) => value != null && typeof value === "object" && typeof value.name === "string" && typeof value.lastModified === "number" && isBlobLike(value);
var isBlobLike = (value) => value != null && typeof value === "object" && typeof value.size === "number" && typeof value.type === "string" && typeof value.text === "function" && typeof value.slice === "function" && typeof value.arrayBuffer === "function";
var isUploadable = (value) => {
  return isFileLike(value) || isResponseLike(value) || isFsReadStream(value);
};
async function toFile(value, name, options = {}) {
  var _a2, _b, _c;
  value = await value;
  if (isResponseLike(value)) {
    const blob = await value.blob();
    name || (name = (_a2 = new URL(value.url).pathname.split(/[\\/]/).pop()) != null ? _a2 : "unknown_file");
    return new File2([blob], name, options);
  }
  const bits = await getBytes(value);
  name || (name = (_b = getName(value)) != null ? _b : "unknown_file");
  if (!options.type) {
    const type = (_c = bits[0]) == null ? void 0 : _c.type;
    if (typeof type === "string") {
      options = { ...options, type };
    }
  }
  return new File2(bits, name, options);
}
async function getBytes(value) {
  var _a2;
  let parts = [];
  if (typeof value === "string" || ArrayBuffer.isView(value) || // includes Uint8Array, Buffer, etc.
  value instanceof ArrayBuffer) {
    parts.push(value);
  } else if (isBlobLike(value)) {
    parts.push(await value.arrayBuffer());
  } else if (isAsyncIterableIterator(value)) {
    for await (const chunk of value) {
      parts.push(chunk);
    }
  } else {
    throw new Error(`Unexpected data type: ${typeof value}; constructor: ${(_a2 = value == null ? void 0 : value.constructor) == null ? void 0 : _a2.name}; props: ${propsForError(value)}`);
  }
  return parts;
}
function propsForError(value) {
  const props = Object.getOwnPropertyNames(value);
  return `[${props.map((p) => `"${p}"`).join(", ")}]`;
}
function getName(value) {
  var _a2;
  return getStringFromMaybeBuffer(value.name) || getStringFromMaybeBuffer(value.filename) || // For fs.ReadStream
  ((_a2 = getStringFromMaybeBuffer(value.path)) == null ? void 0 : _a2.split(/[\\/]/).pop());
}
var getStringFromMaybeBuffer = (x) => {
  if (typeof x === "string")
    return x;
  if (typeof Buffer !== "undefined" && x instanceof Buffer)
    return String(x);
  return void 0;
};
var isAsyncIterableIterator = (value) => value != null && typeof value === "object" && typeof value[Symbol.asyncIterator] === "function";
var isMultipartBody = (body) => body && typeof body === "object" && body.body && body[Symbol.toStringTag] === "MultipartBody";
var multipartFormRequestOptions = async (opts) => {
  const form = await createForm(opts.body);
  return getMultipartRequestOptions(form, opts);
};
var createForm = async (body) => {
  const form = new FormData2();
  await Promise.all(Object.entries(body || {}).map(([key, value]) => addFormValue(form, key, value)));
  return form;
};
var addFormValue = async (form, key, value) => {
  if (value === void 0)
    return;
  if (value == null) {
    throw new TypeError(`Received null for "${key}"; to pass null in FormData, you must use the string 'null'`);
  }
  if (typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
    form.append(key, String(value));
  } else if (isUploadable(value)) {
    const file = await toFile(value);
    form.append(key, file);
  } else if (Array.isArray(value)) {
    await Promise.all(value.map((entry) => addFormValue(form, key + "[]", entry)));
  } else if (typeof value === "object") {
    await Promise.all(Object.entries(value).map(([name, prop]) => addFormValue(form, `${key}[${name}]`, prop)));
  } else {
    throw new TypeError(`Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`);
  }
};

// node_modules/groq-sdk/core.mjs
var __classPrivateFieldSet = function(receiver, state, value, kind2, f) {
  if (kind2 === "m")
    throw new TypeError("Private method is not writable");
  if (kind2 === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind2 === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
};
var __classPrivateFieldGet = function(receiver, state, kind2, f) {
  if (kind2 === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind2 === "m" ? f : kind2 === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AbstractPage_client;
async function defaultParseResponse(props) {
  const { response } = props;
  if (props.options.stream) {
    debug("response", response.status, response.url, response.headers, response.body);
    if (props.options.__streamClass) {
      return props.options.__streamClass.fromSSEResponse(response, props.controller);
    }
    return Stream.fromSSEResponse(response, props.controller);
  }
  if (response.status === 204) {
    return null;
  }
  if (props.options.__binaryResponse) {
    return response;
  }
  const contentType = response.headers.get("content-type");
  const isJSON = (contentType == null ? void 0 : contentType.includes("application/json")) || (contentType == null ? void 0 : contentType.includes("application/vnd.api+json"));
  if (isJSON) {
    const json = await response.json();
    debug("response", response.status, response.url, response.headers, json);
    return json;
  }
  const text = await response.text();
  debug("response", response.status, response.url, response.headers, text);
  return text;
}
var APIPromise = class extends Promise {
  constructor(responsePromise, parseResponse = defaultParseResponse) {
    super((resolve) => {
      resolve(null);
    });
    this.responsePromise = responsePromise;
    this.parseResponse = parseResponse;
  }
  _thenUnwrap(transform) {
    return new APIPromise(this.responsePromise, async (props) => transform(await this.parseResponse(props)));
  }
  /**
   * Gets the raw `Response` instance instead of parsing the response
   * data.
   *
   * If you want to parse the response body but still get the `Response`
   * instance, you can use {@link withResponse()}.
   *
   * 👋 Getting the wrong TypeScript type for `Response`?
   * Try setting `"moduleResolution": "NodeNext"` if you can,
   * or add one of these imports before your first `import … from 'groq-sdk'`:
   * - `import 'groq-sdk/shims/node'` (if you're running on Node)
   * - `import 'groq-sdk/shims/web'` (otherwise)
   */
  asResponse() {
    return this.responsePromise.then((p) => p.response);
  }
  /**
   * Gets the parsed response data and the raw `Response` instance.
   *
   * If you just want to get the raw `Response` instance without parsing it,
   * you can use {@link asResponse()}.
   *
   *
   * 👋 Getting the wrong TypeScript type for `Response`?
   * Try setting `"moduleResolution": "NodeNext"` if you can,
   * or add one of these imports before your first `import … from 'groq-sdk'`:
   * - `import 'groq-sdk/shims/node'` (if you're running on Node)
   * - `import 'groq-sdk/shims/web'` (otherwise)
   */
  async withResponse() {
    const [data, response] = await Promise.all([this.parse(), this.asResponse()]);
    return { data, response };
  }
  parse() {
    if (!this.parsedPromise) {
      this.parsedPromise = this.responsePromise.then(this.parseResponse);
    }
    return this.parsedPromise;
  }
  then(onfulfilled, onrejected) {
    return this.parse().then(onfulfilled, onrejected);
  }
  catch(onrejected) {
    return this.parse().catch(onrejected);
  }
  finally(onfinally) {
    return this.parse().finally(onfinally);
  }
};
var APIClient = class {
  constructor({
    baseURL,
    maxRetries = 2,
    timeout = 6e4,
    // 1 minute
    httpAgent,
    fetch: overridenFetch
  }) {
    this.baseURL = baseURL;
    this.maxRetries = validatePositiveInteger("maxRetries", maxRetries);
    this.timeout = validatePositiveInteger("timeout", timeout);
    this.httpAgent = httpAgent;
    this.fetch = overridenFetch != null ? overridenFetch : fetch2;
  }
  authHeaders(opts) {
    return {};
  }
  /**
   * Override this to add your own default headers, for example:
   *
   *  {
   *    ...super.defaultHeaders(),
   *    Authorization: 'Bearer 123',
   *  }
   */
  defaultHeaders(opts) {
    return {
      Accept: "application/json",
      "Content-Type": "application/json",
      "User-Agent": this.getUserAgent(),
      ...getPlatformHeaders(),
      ...this.authHeaders(opts)
    };
  }
  /**
   * Override this to add your own headers validation:
   */
  validateHeaders(headers, customHeaders) {
  }
  defaultIdempotencyKey() {
    return `stainless-node-retry-${uuid4()}`;
  }
  get(path, opts) {
    return this.methodRequest("get", path, opts);
  }
  post(path, opts) {
    return this.methodRequest("post", path, opts);
  }
  patch(path, opts) {
    return this.methodRequest("patch", path, opts);
  }
  put(path, opts) {
    return this.methodRequest("put", path, opts);
  }
  delete(path, opts) {
    return this.methodRequest("delete", path, opts);
  }
  methodRequest(method, path, opts) {
    return this.request(Promise.resolve(opts).then((opts2) => ({ method, path, ...opts2 })));
  }
  getAPIList(path, Page, opts) {
    return this.requestAPIList(Page, { method: "get", path, ...opts });
  }
  calculateContentLength(body) {
    if (typeof body === "string") {
      if (typeof Buffer !== "undefined") {
        return Buffer.byteLength(body, "utf8").toString();
      }
      if (typeof TextEncoder !== "undefined") {
        const encoder = new TextEncoder();
        const encoded = encoder.encode(body);
        return encoded.length.toString();
      }
    }
    return null;
  }
  buildRequest(options) {
    var _a2, _b, _c, _d, _e, _f;
    const { method, path, query, headers = {} } = options;
    const body = isMultipartBody(options.body) ? options.body.body : options.body ? JSON.stringify(options.body, null, 2) : null;
    const contentLength = this.calculateContentLength(body);
    const url = this.buildURL(path, query);
    if ("timeout" in options)
      validatePositiveInteger("timeout", options.timeout);
    const timeout = (_a2 = options.timeout) != null ? _a2 : this.timeout;
    const httpAgent = (_c = (_b = options.httpAgent) != null ? _b : this.httpAgent) != null ? _c : getDefaultAgent(url);
    const minAgentTimeout = timeout + 1e3;
    if (typeof ((_d = httpAgent == null ? void 0 : httpAgent.options) == null ? void 0 : _d.timeout) === "number" && minAgentTimeout > ((_e = httpAgent.options.timeout) != null ? _e : 0)) {
      httpAgent.options.timeout = minAgentTimeout;
    }
    if (this.idempotencyHeader && method !== "get") {
      if (!options.idempotencyKey)
        options.idempotencyKey = this.defaultIdempotencyKey();
      headers[this.idempotencyHeader] = options.idempotencyKey;
    }
    const reqHeaders = this.buildHeaders({ options, headers, contentLength });
    const req = {
      method,
      ...body && { body },
      headers: reqHeaders,
      ...httpAgent && { agent: httpAgent },
      // @ts-ignore node-fetch uses a custom AbortSignal type that is
      // not compatible with standard web types
      signal: (_f = options.signal) != null ? _f : null
    };
    return { req, url, timeout };
  }
  buildHeaders({ options, headers, contentLength }) {
    const reqHeaders = {};
    if (contentLength) {
      reqHeaders["content-length"] = contentLength;
    }
    const defaultHeaders = this.defaultHeaders(options);
    applyHeadersMut(reqHeaders, defaultHeaders);
    applyHeadersMut(reqHeaders, headers);
    if (isMultipartBody(options.body) && kind !== "node") {
      delete reqHeaders["content-type"];
    }
    this.validateHeaders(reqHeaders, headers);
    return reqHeaders;
  }
  /**
   * Used as a callback for mutating the given `FinalRequestOptions` object.
   */
  async prepareOptions(options) {
  }
  /**
   * Used as a callback for mutating the given `RequestInit` object.
   *
   * This is useful for cases where you want to add certain headers based off of
   * the request properties, e.g. `method` or `url`.
   */
  async prepareRequest(request, { url, options }) {
  }
  parseHeaders(headers) {
    return !headers ? {} : Symbol.iterator in headers ? Object.fromEntries(Array.from(headers).map((header) => [...header])) : { ...headers };
  }
  makeStatusError(status, error, message, headers) {
    return APIError.generate(status, error, message, headers);
  }
  request(options, remainingRetries = null) {
    return new APIPromise(this.makeRequest(options, remainingRetries));
  }
  async makeRequest(optionsInput, retriesRemaining) {
    var _a2, _b, _c;
    const options = await optionsInput;
    if (retriesRemaining == null) {
      retriesRemaining = (_a2 = options.maxRetries) != null ? _a2 : this.maxRetries;
    }
    await this.prepareOptions(options);
    const { req, url, timeout } = this.buildRequest(options);
    await this.prepareRequest(req, { url, options });
    debug("request", url, options, req.headers);
    if ((_b = options.signal) == null ? void 0 : _b.aborted) {
      throw new APIUserAbortError();
    }
    const controller = new AbortController();
    const response = await this.fetchWithTimeout(url, req, timeout, controller).catch(castToError);
    if (response instanceof Error) {
      if ((_c = options.signal) == null ? void 0 : _c.aborted) {
        throw new APIUserAbortError();
      }
      if (retriesRemaining) {
        return this.retryRequest(options, retriesRemaining);
      }
      if (response.name === "AbortError") {
        throw new APIConnectionTimeoutError();
      }
      throw new APIConnectionError({ cause: response });
    }
    const responseHeaders = createResponseHeaders(response.headers);
    if (!response.ok) {
      if (retriesRemaining && this.shouldRetry(response)) {
        const retryMessage2 = `retrying, ${retriesRemaining} attempts remaining`;
        debug(`response (error; ${retryMessage2})`, response.status, url, responseHeaders);
        return this.retryRequest(options, retriesRemaining, responseHeaders);
      }
      const errText = await response.text().catch((e) => castToError(e).message);
      const errJSON = safeJSON(errText);
      const errMessage = errJSON ? void 0 : errText;
      const retryMessage = retriesRemaining ? `(error; no more retries left)` : `(error; not retryable)`;
      debug(`response (error; ${retryMessage})`, response.status, url, responseHeaders, errMessage);
      const err = this.makeStatusError(response.status, errJSON, errMessage, responseHeaders);
      throw err;
    }
    return { response, options, controller };
  }
  requestAPIList(Page, options) {
    const request = this.makeRequest(options, null);
    return new PagePromise(this, request, Page);
  }
  buildURL(path, query) {
    const url = isAbsoluteURL(path) ? new URL(path) : new URL(this.baseURL + (this.baseURL.endsWith("/") && path.startsWith("/") ? path.slice(1) : path));
    const defaultQuery = this.defaultQuery();
    if (!isEmptyObj(defaultQuery)) {
      query = { ...defaultQuery, ...query };
    }
    if (typeof query === "object" && query && !Array.isArray(query)) {
      url.search = this.stringifyQuery(query);
    }
    return url.toString();
  }
  stringifyQuery(query) {
    return Object.entries(query).filter(([_, value]) => typeof value !== "undefined").map(([key, value]) => {
      if (typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
        return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;
      }
      if (value === null) {
        return `${encodeURIComponent(key)}=`;
      }
      throw new GroqError(`Cannot stringify type ${typeof value}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`);
    }).join("&");
  }
  async fetchWithTimeout(url, init, ms, controller) {
    const { signal, ...options } = init || {};
    if (signal)
      signal.addEventListener("abort", () => controller.abort());
    const timeout = setTimeout(() => controller.abort(), ms);
    return this.getRequestClient().fetch.call(void 0, url, { signal: controller.signal, ...options }).finally(() => {
      clearTimeout(timeout);
    });
  }
  getRequestClient() {
    return { fetch: this.fetch };
  }
  shouldRetry(response) {
    const shouldRetryHeader = response.headers.get("x-should-retry");
    if (shouldRetryHeader === "true")
      return true;
    if (shouldRetryHeader === "false")
      return false;
    if (response.status === 408)
      return true;
    if (response.status === 409)
      return true;
    if (response.status === 429)
      return true;
    if (response.status >= 500)
      return true;
    return false;
  }
  async retryRequest(options, retriesRemaining, responseHeaders) {
    var _a2;
    let timeoutMillis;
    const retryAfterMillisHeader = responseHeaders == null ? void 0 : responseHeaders["retry-after-ms"];
    if (retryAfterMillisHeader) {
      const timeoutMs = parseFloat(retryAfterMillisHeader);
      if (!Number.isNaN(timeoutMs)) {
        timeoutMillis = timeoutMs;
      }
    }
    const retryAfterHeader = responseHeaders == null ? void 0 : responseHeaders["retry-after"];
    if (retryAfterHeader && !timeoutMillis) {
      const timeoutSeconds = parseFloat(retryAfterHeader);
      if (!Number.isNaN(timeoutSeconds)) {
        timeoutMillis = timeoutSeconds * 1e3;
      } else {
        timeoutMillis = Date.parse(retryAfterHeader) - Date.now();
      }
    }
    if (!(timeoutMillis && 0 <= timeoutMillis && timeoutMillis < 60 * 1e3)) {
      const maxRetries = (_a2 = options.maxRetries) != null ? _a2 : this.maxRetries;
      timeoutMillis = this.calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries);
    }
    await sleep(timeoutMillis);
    return this.makeRequest(options, retriesRemaining - 1);
  }
  calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries) {
    const initialRetryDelay = 0.5;
    const maxRetryDelay = 8;
    const numRetries = maxRetries - retriesRemaining;
    const sleepSeconds = Math.min(initialRetryDelay * Math.pow(2, numRetries), maxRetryDelay);
    const jitter = 1 - Math.random() * 0.25;
    return sleepSeconds * jitter * 1e3;
  }
  getUserAgent() {
    return `${this.constructor.name}/JS ${VERSION}`;
  }
};
var AbstractPage = class {
  constructor(client, response, body, options) {
    _AbstractPage_client.set(this, void 0);
    __classPrivateFieldSet(this, _AbstractPage_client, client, "f");
    this.options = options;
    this.response = response;
    this.body = body;
  }
  hasNextPage() {
    const items = this.getPaginatedItems();
    if (!items.length)
      return false;
    return this.nextPageInfo() != null;
  }
  async getNextPage() {
    const nextInfo = this.nextPageInfo();
    if (!nextInfo) {
      throw new GroqError("No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.");
    }
    const nextOptions = { ...this.options };
    if ("params" in nextInfo && typeof nextOptions.query === "object") {
      nextOptions.query = { ...nextOptions.query, ...nextInfo.params };
    } else if ("url" in nextInfo) {
      const params = [...Object.entries(nextOptions.query || {}), ...nextInfo.url.searchParams.entries()];
      for (const [key, value] of params) {
        nextInfo.url.searchParams.set(key, value);
      }
      nextOptions.query = void 0;
      nextOptions.path = nextInfo.url.toString();
    }
    return await __classPrivateFieldGet(this, _AbstractPage_client, "f").requestAPIList(this.constructor, nextOptions);
  }
  async *iterPages() {
    let page = this;
    yield page;
    while (page.hasNextPage()) {
      page = await page.getNextPage();
      yield page;
    }
  }
  async *[(_AbstractPage_client = /* @__PURE__ */ new WeakMap(), Symbol.asyncIterator)]() {
    for await (const page of this.iterPages()) {
      for (const item of page.getPaginatedItems()) {
        yield item;
      }
    }
  }
};
var PagePromise = class extends APIPromise {
  constructor(client, request, Page) {
    super(request, async (props) => new Page(client, props.response, await defaultParseResponse(props), props.options));
  }
  /**
   * Allow auto-paginating iteration on an unawaited list call, eg:
   *
   *    for await (const item of client.items.list()) {
   *      console.log(item)
   *    }
   */
  async *[Symbol.asyncIterator]() {
    const page = await this;
    for await (const item of page) {
      yield item;
    }
  }
};
var createResponseHeaders = (headers) => {
  return new Proxy(Object.fromEntries(
    // @ts-ignore
    headers.entries()
  ), {
    get(target, name) {
      const key = name.toString();
      return target[key.toLowerCase()] || target[key];
    }
  });
};
var getPlatformProperties = () => {
  if (typeof Deno !== "undefined" && Deno.build != null) {
    return {
      "X-Stainless-Lang": "js",
      "X-Stainless-Package-Version": VERSION,
      "X-Stainless-OS": normalizePlatform(Deno.build.os),
      "X-Stainless-Arch": normalizeArch(Deno.build.arch),
      "X-Stainless-Runtime": "deno",
      "X-Stainless-Runtime-Version": Deno.version
    };
  }
  if (typeof EdgeRuntime !== "undefined") {
    return {
      "X-Stainless-Lang": "js",
      "X-Stainless-Package-Version": VERSION,
      "X-Stainless-OS": "Unknown",
      "X-Stainless-Arch": `other:${EdgeRuntime}`,
      "X-Stainless-Runtime": "edge",
      "X-Stainless-Runtime-Version": process.version
    };
  }
  if (Object.prototype.toString.call(typeof process !== "undefined" ? process : 0) === "[object process]") {
    return {
      "X-Stainless-Lang": "js",
      "X-Stainless-Package-Version": VERSION,
      "X-Stainless-OS": normalizePlatform(process.platform),
      "X-Stainless-Arch": normalizeArch(process.arch),
      "X-Stainless-Runtime": "node",
      "X-Stainless-Runtime-Version": process.version
    };
  }
  const browserInfo = getBrowserInfo();
  if (browserInfo) {
    return {
      "X-Stainless-Lang": "js",
      "X-Stainless-Package-Version": VERSION,
      "X-Stainless-OS": "Unknown",
      "X-Stainless-Arch": "unknown",
      "X-Stainless-Runtime": `browser:${browserInfo.browser}`,
      "X-Stainless-Runtime-Version": browserInfo.version
    };
  }
  return {
    "X-Stainless-Lang": "js",
    "X-Stainless-Package-Version": VERSION,
    "X-Stainless-OS": "Unknown",
    "X-Stainless-Arch": "unknown",
    "X-Stainless-Runtime": "unknown",
    "X-Stainless-Runtime-Version": "unknown"
  };
};
function getBrowserInfo() {
  if (typeof navigator === "undefined" || !navigator) {
    return null;
  }
  const browserPatterns = [
    { key: "edge", pattern: /Edge(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "ie", pattern: /MSIE(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "ie", pattern: /Trident(?:.*rv\:(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "chrome", pattern: /Chrome(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "firefox", pattern: /Firefox(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
    { key: "safari", pattern: /(?:Version\W+(\d+)\.(\d+)(?:\.(\d+))?)?(?:\W+Mobile\S*)?\W+Safari/ }
  ];
  for (const { key, pattern } of browserPatterns) {
    const match = pattern.exec(navigator.userAgent);
    if (match) {
      const major = match[1] || 0;
      const minor = match[2] || 0;
      const patch = match[3] || 0;
      return { browser: key, version: `${major}.${minor}.${patch}` };
    }
  }
  return null;
}
var normalizeArch = (arch) => {
  if (arch === "x32")
    return "x32";
  if (arch === "x86_64" || arch === "x64")
    return "x64";
  if (arch === "arm")
    return "arm";
  if (arch === "aarch64" || arch === "arm64")
    return "arm64";
  if (arch)
    return `other:${arch}`;
  return "unknown";
};
var normalizePlatform = (platform) => {
  platform = platform.toLowerCase();
  if (platform.includes("ios"))
    return "iOS";
  if (platform === "android")
    return "Android";
  if (platform === "darwin")
    return "MacOS";
  if (platform === "win32")
    return "Windows";
  if (platform === "freebsd")
    return "FreeBSD";
  if (platform === "openbsd")
    return "OpenBSD";
  if (platform === "linux")
    return "Linux";
  if (platform)
    return `Other:${platform}`;
  return "Unknown";
};
var _platformHeaders;
var getPlatformHeaders = () => {
  return _platformHeaders != null ? _platformHeaders : _platformHeaders = getPlatformProperties();
};
var safeJSON = (text) => {
  try {
    return JSON.parse(text);
  } catch (err) {
    return void 0;
  }
};
var startsWithSchemeRegexp = new RegExp("^(?:[a-z]+:)?//", "i");
var isAbsoluteURL = (url) => {
  return startsWithSchemeRegexp.test(url);
};
var sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
var validatePositiveInteger = (name, n) => {
  if (typeof n !== "number" || !Number.isInteger(n)) {
    throw new GroqError(`${name} must be an integer`);
  }
  if (n < 0) {
    throw new GroqError(`${name} must be a positive integer`);
  }
  return n;
};
var castToError = (err) => {
  if (err instanceof Error)
    return err;
  return new Error(err);
};
var readEnv = (env) => {
  var _a2, _b, _c, _d, _e, _f;
  if (typeof process !== "undefined") {
    return (_c = (_b = (_a2 = process.env) == null ? void 0 : _a2[env]) == null ? void 0 : _b.trim()) != null ? _c : void 0;
  }
  if (typeof Deno !== "undefined") {
    return (_f = (_e = (_d = Deno.env) == null ? void 0 : _d.get) == null ? void 0 : _e.call(_d, env)) == null ? void 0 : _f.trim();
  }
  return void 0;
};
function isEmptyObj(obj) {
  if (!obj)
    return true;
  for (const _k in obj)
    return false;
  return true;
}
function hasOwn(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}
function applyHeadersMut(targetHeaders, newHeaders) {
  for (const k in newHeaders) {
    if (!hasOwn(newHeaders, k))
      continue;
    const lowerKey = k.toLowerCase();
    if (!lowerKey)
      continue;
    const val = newHeaders[k];
    if (val === null) {
      delete targetHeaders[lowerKey];
    } else if (val !== void 0) {
      targetHeaders[lowerKey] = val;
    }
  }
}
function debug(action, ...args) {
  if (typeof process !== "undefined" && process.env["DEBUG"] === "true") {
    console.log(`Groq:DEBUG:${action}`, ...args);
  }
}
var uuid4 = () => {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
    const r = Math.random() * 16 | 0;
    const v = c === "x" ? r : r & 3 | 8;
    return v.toString(16);
  });
};
var isRunningInBrowser = () => {
  return (
    // @ts-ignore
    typeof window !== "undefined" && // @ts-ignore
    typeof window.document !== "undefined" && // @ts-ignore
    typeof navigator !== "undefined"
  );
};

// node_modules/groq-sdk/resource.mjs
var APIResource = class {
  constructor(client) {
    this._client = client;
  }
};

// node_modules/groq-sdk/resources/chat/completions.mjs
var Completions = class extends APIResource {
  create(body, options) {
    var _a2;
    return this._client.post("/openai/v1/chat/completions", { body, ...options, stream: (_a2 = body.stream) != null ? _a2 : false });
  }
};
(function(Completions2) {
})(Completions || (Completions = {}));

// node_modules/groq-sdk/resources/chat/chat.mjs
var Chat = class extends APIResource {
  constructor() {
    super(...arguments);
    this.completions = new Completions(this._client);
  }
};
(function(Chat2) {
  Chat2.Completions = Completions;
})(Chat || (Chat = {}));

// node_modules/groq-sdk/resources/models.mjs
var Models = class extends APIResource {
  /**
   * Get a specific model
   */
  retrieve(model, options) {
    return this._client.get(`/openai/v1/models/${model}`, options);
  }
  /**
   * get all available models
   */
  list(options) {
    return this._client.get("/openai/v1/models", options);
  }
  /**
   * Delete a model
   */
  delete(model, options) {
    return this._client.delete(`/openai/v1/models/${model}`, {
      ...options,
      headers: { Accept: "*/*", ...options == null ? void 0 : options.headers }
    });
  }
};
(function(Models2) {
})(Models || (Models = {}));

// node_modules/groq-sdk/resources/audio/transcriptions.mjs
var Transcriptions = class extends APIResource {
  /**
   * Transcribes audio into the input language.
   */
  create(body, options) {
    return this._client.post("/openai/v1/audio/transcriptions", multipartFormRequestOptions({ body, ...options }));
  }
};
(function(Transcriptions2) {
})(Transcriptions || (Transcriptions = {}));

// node_modules/groq-sdk/resources/audio/translations.mjs
var Translations = class extends APIResource {
  /**
   * Translates audio into English.
   */
  create(body, options) {
    return this._client.post("/openai/v1/audio/translations", multipartFormRequestOptions({ body, ...options }));
  }
};
(function(Translations2) {
})(Translations || (Translations = {}));

// node_modules/groq-sdk/resources/audio/audio.mjs
var Audio = class extends APIResource {
  constructor() {
    super(...arguments);
    this.transcriptions = new Transcriptions(this._client);
    this.translations = new Translations(this._client);
  }
};
(function(Audio2) {
  Audio2.Transcriptions = Transcriptions;
  Audio2.Translations = Translations;
})(Audio || (Audio = {}));

// node_modules/groq-sdk/index.mjs
var _a;
var Groq = class extends APIClient {
  /**
   * API Client for interfacing with the Groq API.
   *
   * @param {string | undefined} [opts.apiKey=process.env['GROQ_API_KEY'] ?? undefined]
   * @param {string} [opts.baseURL=process.env['GROQ_BASE_URL'] ?? https://api.groq.com] - Override the default base URL for the API.
   * @param {number} [opts.timeout=1 minute] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
   * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
   * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
   * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
   * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
   * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
   * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.
   */
  constructor({ baseURL = readEnv("GROQ_BASE_URL"), apiKey = readEnv("GROQ_API_KEY"), ...opts } = {}) {
    var _a2;
    if (apiKey === void 0) {
      throw new GroqError("The GROQ_API_KEY environment variable is missing or empty; either provide it, or instantiate the Groq client with an apiKey option, like new Groq({ apiKey: 'My API Key' }).");
    }
    const options = {
      apiKey,
      ...opts,
      baseURL: baseURL || `https://api.groq.com`
    };
    if (!options.dangerouslyAllowBrowser && isRunningInBrowser()) {
      throw new GroqError("This is disabled by default, as it risks exposing your secret API credentials to attackers.\nIf you understand the risks and have appropriate mitigations in place,\nyou can set the `dangerouslyAllowBrowser` option to `true`, e.g.,\n\nnew Groq({ dangerouslyAllowBrowser: true })");
    }
    super({
      baseURL: options.baseURL,
      timeout: (_a2 = options.timeout) != null ? _a2 : 6e4,
      httpAgent: options.httpAgent,
      maxRetries: options.maxRetries,
      fetch: options.fetch
    });
    this.chat = new Chat(this);
    this.audio = new Audio(this);
    this.models = new Models(this);
    this._options = options;
    this.apiKey = apiKey;
  }
  defaultQuery() {
    return this._options.defaultQuery;
  }
  defaultHeaders(opts) {
    return {
      ...super.defaultHeaders(opts),
      ...this._options.defaultHeaders
    };
  }
  authHeaders(opts) {
    return { Authorization: `Bearer ${this.apiKey}` };
  }
};
_a = Groq;
Groq.Groq = _a;
Groq.GroqError = GroqError;
Groq.APIError = APIError;
Groq.APIConnectionError = APIConnectionError;
Groq.APIConnectionTimeoutError = APIConnectionTimeoutError;
Groq.APIUserAbortError = APIUserAbortError;
Groq.NotFoundError = NotFoundError;
Groq.ConflictError = ConflictError;
Groq.RateLimitError = RateLimitError;
Groq.BadRequestError = BadRequestError;
Groq.AuthenticationError = AuthenticationError;
Groq.InternalServerError = InternalServerError;
Groq.PermissionDeniedError = PermissionDeniedError;
Groq.UnprocessableEntityError = UnprocessableEntityError;
var { GroqError: GroqError2, APIError: APIError2, APIConnectionError: APIConnectionError2, APIConnectionTimeoutError: APIConnectionTimeoutError2, APIUserAbortError: APIUserAbortError2, NotFoundError: NotFoundError2, ConflictError: ConflictError2, RateLimitError: RateLimitError2, BadRequestError: BadRequestError2, AuthenticationError: AuthenticationError2, InternalServerError: InternalServerError2, PermissionDeniedError: PermissionDeniedError2, UnprocessableEntityError: UnprocessableEntityError2 } = error_exports;
(function(Groq2) {
  Groq2.toFile = toFile;
  Groq2.fileFromPath = fileFromPath;
  Groq2.Chat = Chat;
  Groq2.Audio = Audio;
  Groq2.Models = Models;
})(Groq || (Groq = {}));
var groq_sdk_default = Groq;

// node_modules/monkey-around/dist/index.mjs
function around(obj, factories) {
  const removers = Object.keys(factories).map((key) => around1(obj, key, factories[key]));
  return removers.length === 1 ? removers[0] : function() {
    removers.forEach((r) => r());
  };
}
function around1(obj, method, createWrapper) {
  const inherited = obj[method], hadOwn = obj.hasOwnProperty(method), original = hadOwn ? inherited : function() {
    return Object.getPrototypeOf(obj)[method].apply(this, arguments);
  };
  let current = createWrapper(original);
  if (inherited)
    Object.setPrototypeOf(current, inherited);
  Object.setPrototypeOf(wrapper, current);
  obj[method] = wrapper;
  return remove;
  function wrapper(...args) {
    if (current === original && obj[method] === wrapper)
      remove();
    return current.apply(this, args);
  }
  function remove() {
    if (obj[method] === wrapper) {
      if (hadOwn)
        obj[method] = original;
      else
        delete obj[method];
    }
    if (current === original)
      return;
    current = original;
    Object.setPrototypeOf(wrapper, inherited || Function);
  }
}

// main.ts
var import_obsidian = require("obsidian");
var import_state = require("@codemirror/state");
var import_view = require("@codemirror/view");
var dotenv = __toESM(require_main());
var basePath = "/Users/jacobcolling/Documents/accelerate/accelerate/";
dotenv.config({
  path: `${basePath}/.obsidian/plugins/caret/.env`,
  debug: true
});
var groq_api_key = process.env.GROQ_API_KEY;
var groq = new groq_sdk_default({ apiKey: groq_api_key, dangerouslyAllowBrowser: true });
var CMDJModal = class extends import_obsidian.Modal {
  constructor(app, selectedText, startIndex, endIndex) {
    super(app);
    this.selectedText = selectedText;
    this.startIndex = startIndex;
    this.endIndex = endIndex;
  }
  onOpen() {
    const { contentEl } = this;
    const textDisplay = contentEl.createEl("div", {
      text: this.selectedText
    });
    textDisplay.style.height = "60px";
    textDisplay.style.overflow = "scroll";
    contentEl.createEl("br");
    const textArea = contentEl.createEl("textarea", {
      placeholder: "Type here..."
    });
    textArea.style.width = "100%";
    textArea.style.minHeight = "100px";
    textArea.style.resize = "none";
    textArea.oninput = () => {
      textArea.style.height = "";
      textArea.style.height = `${textArea.scrollHeight}px`;
    };
    const buttonContainer = contentEl.createEl("div", { cls: "button-container" });
    new import_obsidian.Setting(buttonContainer).addButton(
      (btn) => btn.setButtonText("Append Output").onClick(async () => {
        this.result = textArea.value;
        const content = await this.submit_edit(this.result);
        this.insert_response(content);
        this.close();
      })
    ).addButton(
      (btn) => btn.setButtonText("Replace").setCta().onClick(async () => {
        this.result = textArea.value;
        const content = await this.submit_edit(this.result);
        this.apply_delete(this.result);
        this.insert_response(content, true);
        this.close();
      })
    );
  }
  async submit_edit(result) {
    let message = `
Please apply the following instructions to the below content:

Instructions:
${this.result}

Content:
${this.selectedText}

## Rules:
- Just return the reponse that follows the instructions. No need to include a preample or anything

## Markdown Formatting: 
Always apply markdown formatting. For keywords use the following:
	todos - Prepend todo lines with:
	- [ ] 
`.trim();
    const data = { message };
    const resp = await fetch("http://localhost:8000/single-turn", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(data)
    });
    const output = await resp.json();
    return output.content;
  }
  insert_response(response, replace = false) {
    var _a2;
    const editor = (_a2 = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView)) == null ? void 0 : _a2.editor;
    if (editor) {
      let index = this.endIndex;
      if (replace) {
        index = index + 4;
      }
      const pos = editor.offsetToPos(index);
      editor.replaceRange(`
|+${response}+|`, pos);
      editor.setCursor(pos);
      editor.focus();
    }
  }
  apply_delete(text) {
    var _a2;
    const editor = (_a2 = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView)) == null ? void 0 : _a2.editor;
    if (editor) {
      const content = editor.getValue();
      const index = content.indexOf(this.selectedText);
      if (index !== -1) {
        const beforeText = content.substring(0, index);
        const afterText = content.substring(index + this.selectedText.length);
        const newText = beforeText + `|-${this.selectedText}-|` + afterText;
        editor.setValue(newText);
      }
    }
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};
var redBackgroundField = import_state.StateField.define({
  create(state) {
    return import_view.Decoration.none;
  },
  update(oldState, transaction) {
    const builder = new import_state.RangeSetBuilder();
    const docText = transaction.state.doc.toString();
    const delete_regex = /\|-(.*?)-\|/gs;
    const add_regex = /\|\+(.*?)\+\|/gs;
    let delete_match;
    let add_match;
    let ranges = [];
    while ((delete_match = delete_regex.exec(docText)) !== null) {
      const start = delete_match.index;
      const end = delete_regex.lastIndex;
      ranges.push({ start, end, style: "background-color: #f56c62;" });
    }
    while ((add_match = add_regex.exec(docText)) !== null) {
      const start = add_match.index;
      const end = add_regex.lastIndex;
      ranges.push({ start, end, style: "background-color: #64f562;" });
    }
    ranges.sort((a, b) => a.start - b.start);
    ranges.forEach((range) => {
      builder.add(
        range.start,
        range.end,
        import_view.Decoration.mark({
          attributes: { style: range.style }
        })
      );
    });
    return builder.finish();
  },
  provide(field) {
    return import_view.EditorView.decorations.from(field);
  }
});
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var VIEW_NAME_SIDEBAR_CHAT = "sidebar-caret";
var SidebarChat = class extends import_obsidian.ItemView {
  constructor(leaf) {
    super(leaf);
  }
  // Container for messages
  getViewType() {
    return VIEW_NAME_SIDEBAR_CHAT;
  }
  getDisplayText() {
    return VIEW_NAME_SIDEBAR_CHAT;
  }
  async onOpen() {
    const metacontainer = this.containerEl.children[1];
    metacontainer.empty();
    const container = metacontainer.createEl("div", {
      cls: "container"
    });
    metacontainer.prepend(container);
    this.messagesContainer = container.createEl("div", {
      cls: "messages-container"
    });
    this.addMessage("MLX Testing", "system");
    this.createChatInputArea(container);
  }
  createChatInputArea(container) {
    const inputContainer = container.createEl("div", {
      cls: "chat-input-container"
    });
    this.textBox = inputContainer.createEl("textarea", {
      cls: "full_width_text_container"
    });
    this.textBox.placeholder = "Type something...";
    const button = inputContainer.createEl("button");
    button.textContent = "Submit";
    button.addEventListener("click", () => {
      this.submitMessage(this.textBox.value);
      this.textBox.value = "";
    });
  }
  addMessage(text, sender) {
    const messageDiv = this.messagesContainer.createEl("div", {
      cls: `message ${sender}`
    });
    messageDiv.textContent = text;
  }
  submitMessage(userMessage) {
    var _a2;
    let current_page_content = "";
    if (userMessage.includes("@current")) {
      const markdownView = (_a2 = this.app.workspace.getLeavesOfType("markdown").find((leaf) => leaf.view instanceof import_obsidian.MarkdownView && leaf.width > 0)) == null ? void 0 : _a2.view;
      if (markdownView && markdownView.editor) {
        current_page_content = markdownView.editor.getValue();
      }
    }
    this.addMessage(userMessage, "user");
    const current_page_message = `
		${userMessage}

		------ Note for Model --- 
		When I am referring to @current, I meant the following:

		${current_page_content}
		`;
    let final_message = userMessage;
    if (current_page_content.length > 0) {
      final_message = current_page_message;
    }
    const data = { message: final_message };
    fetch("http://localhost:8000/conversation", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(data)
    }).then((response) => response.json()).then((data2) => {
      this.addMessage(data2.response, "system");
    }).catch((error) => {
      console.error("Error:", error);
    });
  }
  async onClose() {
  }
};
var VIEW_NAME_MAIN_CHAT = "main-caret";
var MainChat = class extends import_obsidian.ItemView {
  constructor(leaf, chat_id, conversation = []) {
    super(leaf);
    this.chat_id = chat_id || this.generateRandomID(5);
    this.conversation = conversation;
  }
  // List to store conversation messages
  getViewType() {
    return VIEW_NAME_MAIN_CHAT;
  }
  getDisplayText() {
    return `MLX Local Chat: ${this.chat_id}`;
  }
  async onOpen() {
    const metacontainer = this.containerEl.children[1];
    metacontainer.empty();
    const container = metacontainer.createEl("div", {
      cls: "container"
    });
    metacontainer.prepend(container);
    this.messagesContainer = container.createEl("div", {
      cls: "messages-container"
    });
    this.renderConversation();
    this.createChatInputArea(container);
  }
  createChatInputArea(container) {
    const inputContainer = container.createEl("div", {});
    this.textBox = inputContainer.createEl("textarea", {
      cls: "full_width_text_container"
    });
    this.textBox.placeholder = "Type something...";
    const buttonContainer = inputContainer.createEl("div", {
      cls: "button-container"
    });
    const saveButton = buttonContainer.createEl("button");
    saveButton.textContent = "Save Chat";
    saveButton.addEventListener("click", () => {
      this.saveChat();
    });
    const submitButton = buttonContainer.createEl("button");
    submitButton.textContent = "Submit";
    submitButton.addEventListener("click", () => {
      this.submitMessage(this.textBox.value);
      this.textBox.value = "";
    });
  }
  addMessage(text, sender) {
    this.conversation.push({ content: text, role: sender });
    this.renderConversation();
  }
  renderConversation() {
    this.messagesContainer.empty();
    this.conversation.forEach((message) => {
      const messageDiv = this.messagesContainer.createEl("div", {
        cls: `message ${message.role}`
      });
      messageDiv.textContent = message.content;
    });
  }
  async submitMessage(userMessage) {
    this.addMessage(userMessage, "user");
    const data = {
      conversation: this.conversation
    };
    try {
      const response = await fetch("http://localhost:8000/conversation", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(data)
      });
      const output = await response.json();
      this.addMessage(output.response, "system");
    } catch (error) {
      console.error("Error:", error);
    }
  }
  async saveChat() {
    const chat_folder_path = "chats/";
    const file_name = `${this.chat_id}.md`;
    const file_path = chat_folder_path + file_name;
    let file_content = `\`\`\`xml
		<metadata>
<id>${this.chat_id}</id>
</metadata>
		`;
    let messages = ``;
    this.conversation.forEach((message) => {
      const message_xml = `
			<message>
				<role>${message.role}</role>
				<content>${message.content}</content>
			</message>
			`.trim();
      messages += message_xml;
    });
    let conversation = `<conversation>
${messages}</conversation>\`\`\``;
    file_content += conversation;
    const file = await this.app.vault.getFileByPath(file_path);
    try {
      if (file) {
        await this.app.vault.modify(file, file_content);
      } else {
        await this.app.vault.create(file_path, file_content);
      }
    } catch (error) {
      console.error("Failed to save chat:", error);
    }
  }
  generateRandomID(length) {
    const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    let result = "";
    for (let i = 0; i < length; i++) {
      result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
  }
  async onClose() {
  }
};
var MyPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.childNode = async (canvas, parentNode, x, y, content = "", from_side = "right", to_side = "left", origin = "ignore") => {
      var _a2;
      let tempChildNode = this.addNode(canvas, this.random(16), {
        x,
        y,
        width: parentNode.width,
        height: parentNode.height,
        type: "text",
        content
      });
      await this.createEdge(parentNode, tempChildNode, canvas, from_side, to_side);
      const node = (_a2 = canvas.nodes) == null ? void 0 : _a2.get(tempChildNode == null ? void 0 : tempChildNode.id);
      if (!node)
        return;
      if (origin === "groq") {
        new import_obsidian.Notice("Message back from Groq");
      }
      canvas.requestSave();
      return tempChildNode;
    };
    this.addNode = (canvas, id, {
      x,
      y,
      width,
      height,
      type,
      content,
      subpath
    }) => {
      if (!canvas)
        return;
      const data = canvas.getData();
      if (!data)
        return;
      const node = {
        id,
        x,
        y,
        width,
        height,
        type
      };
      switch (type) {
        case "text":
          node.text = content;
          break;
        case "file":
          node.file = content;
          if (subpath)
            node.subpath = subpath;
          break;
      }
      canvas.importData({
        nodes: [...data.nodes, node],
        edges: data.edges
      });
      canvas.requestFrame();
      return node;
    };
    this.createEdge = async (node1, node2, canvas, from_side = "right", to_side = "left") => {
      this.addEdge(
        canvas,
        this.random(16),
        {
          fromOrTo: "from",
          side: from_side,
          node: node1
        },
        {
          fromOrTo: "to",
          side: to_side,
          node: node2
        }
      );
    };
    // TODO - Change this
    this.random = (e) => {
      let t = [];
      for (let n = 0; n < e; n++) {
        t.push((16 * Math.random() | 0).toString(16));
      }
      return t.join("");
    };
    this.addEdge = (canvas, edgeID, fromEdge, toEdge) => {
      if (!canvas)
        return;
      const data = canvas.getData();
      if (!data)
        return;
      canvas.importData({
        edges: [
          ...data.edges,
          {
            id: edgeID,
            fromNode: fromEdge.node.id,
            fromSide: fromEdge.side,
            toNode: toEdge.node.id,
            toSide: toEdge.side
          }
        ],
        nodes: data.nodes
      });
      canvas.requestFrame();
    };
  }
  async onload() {
    this.addCommand({
      id: "patch-menu",
      name: "Patch Menu",
      callback: async () => {
        this.patchCanvasMenu();
      }
    });
    this.registerEvent(
      this.app.workspace.on("active-leaf-change", () => {
        console.log("Leaf changed");
        const currentLeaf = this.app.workspace.activeLeaf;
        if ((currentLeaf == null ? void 0 : currentLeaf.view.getViewType()) === "canvas") {
          console.log("Leaf is canvas!");
          this.patchCanvasMenu();
        }
      })
    );
    await this.loadSettings();
    this.registerEditorExtension([redBackgroundField]);
    this.addSidebarTab();
    this.addCommand({
      id: "log",
      name: "Log",
      callback: async () => {
        const currentLeaf = this.app.workspace.activeLeaf;
        if ((currentLeaf == null ? void 0 : currentLeaf.view.getViewType()) === "canvas") {
          const canvasView = currentLeaf.view;
          const canvas = canvasView.canvas;
          console.log(canvas);
          console.log(canvas.nodeIndex.data.children);
          const viewportNodes = canvas.getViewportNodes();
          console.log(viewportNodes);
        }
      }
    });
    this.addCommand({
      id: "canvas-prompt",
      name: "Canvas Prompt",
      callback: async () => {
        const currentLeaf = this.app.workspace.activeLeaf;
        if ((currentLeaf == null ? void 0 : currentLeaf.view.getViewType()) === "canvas") {
          const canvasView = currentLeaf.view;
          const canvas = canvasView.canvas;
          const selection = canvas.selection;
          let average_y = 0;
          let average_height = 0;
          let average_width = 0;
          let max_x = 0;
          let total_y = 0;
          let count = 0;
          let total_height = 0;
          let total_width = 0;
          let all_text = "";
          for (const obj of selection) {
            const { x, y, height, width } = obj;
            max_x = Math.max(max_x, x);
            total_y += y;
            total_height += height;
            total_width += width;
            count++;
            if ("text" in obj) {
              const { text } = obj;
              all_text += text + "\n";
            } else if ("filePath" in obj) {
              let { filePath } = obj;
              const file = await this.app.vault.getFileByPath(filePath);
              if (file) {
                const text = await this.app.vault.read(file);
                const file_text = `
                                Title: ${filePath.replace(".md", "")}
                                ${text}
                                `.trim();
                all_text += file_text;
              }
            }
          }
          average_y = count > 0 ? total_y / count : 0;
          average_height = count > 0 ? total_height / count : 0;
          average_width = count > 0 ? total_width / count : 0;
          const modal = new import_obsidian.Modal(this.app);
          modal.contentEl.createEl("h1", { text: "Canvas Prompt" });
          const container = modal.contentEl.createDiv({ cls: "flex-col" });
          const textArea = container.createEl("textarea", {
            placeholder: "",
            cls: "w-full mb-2"
          });
          const submitButton = container.createEl("button", { text: "Submit" });
          submitButton.onclick = async () => {
            modal.close();
            const prompt = `
                        Please do the following:
                        ${textArea.value}

                        Given this content:
                        ${all_text}
                        `;
            const content = await one_shot(prompt);
            const textNodeConfig = {
              pos: { x: max_x + 50, y: average_y },
              // Position on the canvas
              size: { width: average_width, height: average_height },
              // Size of the text box
              position: "center",
              // This might relate to text alignment
              text: content,
              // Text content from input
              save: true,
              // Save this node's state
              focus: true
              // Focus and start editing immediately
            };
            const node = canvas.createTextNode(textNodeConfig);
            const node_id = node.id;
            node.color = "6";
            node.zoomToSelection();
          };
          modal.open();
        }
      }
    });
    this.addCommand({
      id: "create-child",
      name: "Create Child",
      callback: async () => {
        const currentLeaf = this.app.workspace.activeLeaf;
        if ((currentLeaf == null ? void 0 : currentLeaf.view.getViewType()) === "canvas") {
          const canvasView = currentLeaf.view;
          const canvas = canvasView.canvas;
          const selection = canvas.selection;
          const selectionIterator = selection.values();
          const node = selectionIterator.next().value;
          childNode(canvas, node, node.y);
        }
      }
    });
    this.addCommand({
      id: "open-cmdj-modal",
      name: "Open CMD+J Modal",
      hotkeys: [{ modifiers: ["Mod"], key: "j" }],
      callback: () => {
        const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
        if (activeView && activeView.editor) {
          const selectedText = activeView.editor.getSelection();
          const content = activeView.editor.getValue();
          const startIndex = content.indexOf(selectedText);
          const endIndex = startIndex + selectedText.length;
          new CMDJModal(this.app, selectedText, startIndex, endIndex).open();
        } else {
          new import_obsidian.Notice("No active markdown editor or no text selected.");
        }
      }
    });
    this.registerView(VIEW_NAME_SIDEBAR_CHAT, (leaf) => new SidebarChat(leaf));
    this.registerView(VIEW_NAME_MAIN_CHAT, (leaf) => new MainChat(leaf));
    this.addCommand({
      id: "insert-text-into-sidebar",
      name: "Insert Text into Sidebar",
      hotkeys: [{ modifiers: ["Mod"], key: "l" }],
      callback: () => {
        const activeLeaf = this.app.workspace.activeLeaf;
        if (activeLeaf) {
          const editor = activeLeaf.view instanceof import_obsidian.MarkdownView ? activeLeaf.view.editor : null;
          if (editor) {
            const selectedText = editor.getSelection();
            this.insertTextIntoSidebar(selectedText);
          }
        }
      }
    });
    this.addCommand({
      id: "clear-text-in-sidebar",
      name: "Clear Text in Sidebar",
      hotkeys: [{ modifiers: ["Mod"], key: ";" }],
      callback: () => {
        this.clearTextInSidebar();
      }
    });
    async function one_shot(message) {
      const data = { message };
      const resp = await fetch("http://localhost:8000/single-turn", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(data)
      });
      const output = await resp.json();
      return output.content;
    }
    function parseCustomXML(xmlString) {
      function getContent(tag, string) {
        const openTag = `<${tag}>`;
        const closeTag = `</${tag}>`;
        const start = string.indexOf(openTag) + openTag.length;
        const end = string.indexOf(closeTag);
        return string.substring(start, end).trim();
      }
      const conversationId = getContent("id", xmlString);
      const result = {
        metadata: {
          id: conversationId
        },
        conversation: {
          messages: []
        }
      };
      const messagesContent = getContent("conversation", xmlString);
      const messageTags = messagesContent.split("</message>").slice(0, -1);
      for (const messageTag of messageTags) {
        const role = getContent("role", messageTag);
        const content = getContent("content", messageTag);
        result.conversation.messages.push({ role, content });
      }
      return result;
    }
    this.addCommand({
      id: "open-chat",
      name: "Open Chat",
      callback: async () => {
        var _a2;
        const editor = (_a2 = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView)) == null ? void 0 : _a2.editor;
        if (editor) {
          let content = editor.getValue();
          content = content.replace("```xml", "").trim();
          content = content.replace("```", "").trim();
          const xml = parseCustomXML(content);
          const convo_id = xml.metadata.id;
          const messages = xml.conversation.messages;
          if (convo_id && messages) {
            const leaf = this.app.workspace.getLeaf(true);
            const chatView = new MainChat(leaf, convo_id, messages);
            leaf.open(chatView);
            this.app.workspace.revealLeaf(leaf);
          } else {
            new import_obsidian.Notice("No valid chat data found in the current document.");
          }
        } else {
          new import_obsidian.Notice("No active markdown editor found.");
        }
      }
    });
    this.addCommand({
      id: "apply-diffs",
      name: "Apply Diffs",
      hotkeys: [{ modifiers: ["Mod"], key: "d" }],
      callback: () => {
        var _a2;
        const editor = (_a2 = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView)) == null ? void 0 : _a2.editor;
        if (editor) {
          let content = editor.getValue();
          const deleteRegex = /\|-(.*?)-\|/gs;
          content = content.replace(deleteRegex, "");
          content = content.replaceAll("|+", "");
          content = content.replaceAll("+|", "");
          editor.setValue(content);
          new import_obsidian.Notice("Dips applied successfully.");
        } else {
          new import_obsidian.Notice("No active markdown editor found.");
        }
      }
    });
  }
  patchCanvasMenu() {
    var _a2, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;
    const canvasView = (_a2 = this.app.workspace.getLeavesOfType("canvas").first()) == null ? void 0 : _a2.view;
    if (!canvasView) {
      return;
    }
    const canvas = canvasView.canvas;
    const menu = canvasView.canvas.menu;
    if (!menu) {
      console.error("No menu found on the canvas");
      return;
    }
    const that = this;
    const menuUninstaller = around(menu.constructor.prototype, {
      render: (next) => function(...args) {
        const result = next.call(this, ...args);
        that.addGraphButtonIfNeeded(this.menuEl);
        that.addAIButtonIfNeeded(this.menuEl);
        return result;
      }
    });
    console.log("Heree---");
    console.log(canvasView.constructor.prototype);
    (_b = canvasView.scope) == null ? void 0 : _b.register(["Mod", "Shift"], "ArrowUp", () => {
      that.create_directional_node(canvas, "top");
    });
    (_c = canvasView.scope) == null ? void 0 : _c.register(["Mod"], "ArrowUp", () => {
      that.navigate(canvas, "top");
    });
    (_d = canvasView.scope) == null ? void 0 : _d.register(["Mod"], "ArrowDown", () => {
      that.navigate(canvas, "bottom");
    });
    (_e = canvasView.scope) == null ? void 0 : _e.register(["Mod"], "ArrowLeft", () => {
      that.navigate(canvas, "left");
    });
    (_f = canvasView.scope) == null ? void 0 : _f.register(["Mod"], "ArrowRight", () => {
      that.navigate(canvas, "right");
    });
    (_g = canvasView.scope) == null ? void 0 : _g.register(["Mod"], "Enter", () => {
      that.start_editing_node(canvas);
    });
    (_h = canvasView.scope) == null ? void 0 : _h.register(["Mod", "Shift"], "ArrowUp", () => {
      that.create_directional_node(canvas, "top");
    });
    (_i = canvasView.scope) == null ? void 0 : _i.register(["Mod", "Shift"], "ArrowDown", () => {
      that.create_directional_node(canvas, "bottom");
    });
    (_j = canvasView.scope) == null ? void 0 : _j.register(["Mod", "Shift"], "ArrowLeft", () => {
      that.create_directional_node(canvas, "left");
    });
    (_k = canvasView.scope) == null ? void 0 : _k.register(["Mod", "Shift"], "ArrowRight", () => {
      that.create_directional_node(canvas, "right");
    });
    (_l = canvasView.scope) == null ? void 0 : _l.register(["Mod", "Shift"], "Enter", () => {
      that.run_graph_chat(canvas);
    });
    this.register(menuUninstaller);
  }
  create_directional_node(canvas, direction) {
    const selection = canvas.selection;
    const selectionIterator = selection.values();
    const node = selectionIterator.next().value;
    if (!node) {
      return;
    }
    if (node.isEditing) {
      return;
    }
    const parent_node_x = node.x;
    const parent_node_y = node.y;
    const parent_width = node.width;
    const parent_height = node.height;
    let x;
    let y;
    let from_side;
    let to_side;
    switch (direction) {
      case "left":
        x = parent_node_x - parent_width - 200;
        y = parent_node_y;
        from_side = "left";
        to_side = "right";
        break;
      case "right":
        x = parent_node_x + parent_width + 200;
        y = parent_node_y;
        from_side = "right";
        to_side = "left";
        break;
      case "top":
        x = parent_node_x;
        y = parent_node_y - parent_height - 200;
        from_side = "top";
        to_side = "bottom";
        break;
      case "bottom":
        x = parent_node_x;
        y = parent_node_y + parent_height + 200;
        from_side = "bottom";
        to_side = "top";
        break;
      default:
        console.error("Invalid direction provided");
        return;
    }
    this.childNode(canvas, node, x, y, "<role>user</role>", from_side, to_side);
  }
  start_editing_node(canvas) {
    const selection = canvas.selection;
    const selectionIterator = selection.values();
    const node = selectionIterator.next().value;
    const node_id = node.id;
    node.isEditing = true;
    const editButton = document.querySelector('.canvas-menu button[aria-label="Edit"]');
    if (editButton) {
      editButton.click();
    } else {
      console.error("Edit button not found");
    }
  }
  run_graph_chat(canvas) {
    const selection = canvas.selection;
    const selectionIterator = selection.values();
    const node = selectionIterator.next().value;
    const node_id = node.id;
    node.isEditing = true;
    const editButton = document.querySelector('.canvas-menu button[aria-label="Sparkle"]');
    if (editButton) {
      editButton.click();
    } else {
      console.error("Edit button not found");
    }
  }
  navigate(canvas, direction) {
    const selection = canvas.selection;
    const selectionIterator = selection.values();
    const node = selectionIterator.next().value;
    console.log("In canvas");
    console.log(node);
    if (!node) {
      return;
    }
    const node_id = node.id;
    const canvas_data = canvas.getData();
    const edges = canvas_data.edges;
    const nodes = canvas_data.nodes;
    let targetNodeID = null;
    switch (direction) {
      case "right":
        const edgeRightFrom = edges.find((edge) => edge.fromNode === node_id && edge.fromSide === "right");
        if (edgeRightFrom) {
          targetNodeID = edgeRightFrom.toNode;
        } else {
          const edgeRightTo = edges.find((edge) => edge.toNode === node_id && edge.toSide === "right");
          if (edgeRightTo) {
            targetNodeID = edgeRightTo.fromNode;
          }
        }
        break;
      case "left":
        const edgeLeftFrom = edges.find((edge) => edge.fromNode === node_id && edge.fromSide === "left");
        if (edgeLeftFrom) {
          targetNodeID = edgeLeftFrom.toNode;
        } else {
          const edgeLeftTo = edges.find((edge) => edge.toNode === node_id && edge.toSide === "left");
          if (edgeLeftTo) {
            targetNodeID = edgeLeftTo.fromNode;
          }
        }
        break;
      case "top":
        const edgeTopFrom = edges.find((edge) => edge.fromNode === node_id && edge.fromSide === "top");
        if (edgeTopFrom) {
          targetNodeID = edgeTopFrom.toNode;
        } else {
          const edgeTopTo = edges.find((edge) => edge.toNode === node_id && edge.toSide === "top");
          if (edgeTopTo) {
            targetNodeID = edgeTopTo.fromNode;
          }
        }
        break;
      case "bottom":
        const edgeBottomFrom = edges.find((edge) => edge.fromNode === node_id && edge.fromSide === "bottom");
        if (edgeBottomFrom) {
          targetNodeID = edgeBottomFrom.toNode;
        } else {
          const edgeBottomTo = edges.find((edge) => edge.toNode === node_id && edge.toSide === "bottom");
          if (edgeBottomTo) {
            targetNodeID = edgeBottomTo.fromNode;
          }
        }
        break;
    }
    let viewport_nodes = [];
    let initial_viewport_children = canvas.nodeIndex.data.children;
    console.log("View port nodes");
    if (initial_viewport_children.length > 1) {
      for (let i = 0; i < initial_viewport_children.length; i++) {
        const nodes_list = initial_viewport_children[i].children;
        console.log({ nodes_list });
        nodes_list.forEach((node2) => {
          viewport_nodes.push(node2);
        });
      }
    }
    console.log(viewport_nodes);
    console.log(targetNodeID);
    if (targetNodeID) {
      const target_node = viewport_nodes.find((node2) => node2.id === targetNodeID);
      console.log(target_node);
      console.log("Makes it here");
      canvas.selectOnly(target_node);
      canvas.zoomToSelection();
    }
  }
  addGraphButtonIfNeeded(menuEl) {
    if (!menuEl.querySelector(".graph-menu-item")) {
      const graphButtonEl = createEl("button", "clickable-icon graph-menu-item");
      (0, import_obsidian.setTooltip)(graphButtonEl, "Create Node", { placement: "top" });
      (0, import_obsidian.setIcon)(graphButtonEl, "lucide-workflow");
      graphButtonEl.addEventListener("click", () => {
        var _a2;
        console.log("Graph button clicked");
        const canvasView = (_a2 = this.app.workspace.getLeavesOfType("canvas").first()) == null ? void 0 : _a2.view;
        const canvas = canvasView.canvas;
        const selection = canvas.selection;
        const selectionIterator = selection.values();
        const node = selectionIterator.next().value;
        const x = node.x + node.width + 200;
        this.childNode(canvas, node, x, node.y, "<role>user</role>");
      });
      menuEl.appendChild(graphButtonEl);
    }
  }
  get_ancestors(nodes, edges, nodeId) {
    let ancestors = [];
    let currentId = nodeId;
    let processedNodes = /* @__PURE__ */ new Set();
    while (true) {
      const incomingEdges = edges.filter((edge) => edge.toNode === currentId);
      if (incomingEdges.length === 0) {
        break;
      }
      currentId = incomingEdges[0].fromNode;
      if (processedNodes.has(currentId)) {
        break;
      }
      processedNodes.add(currentId);
      const ancestor = nodes.find((node) => node.id === currentId);
      if (ancestor) {
        ancestors.push(ancestor);
      }
    }
    return ancestors;
  }
  getAllAncestorNodes(nodes, edges, nodeId) {
    let ancestors = [];
    let queue = [nodeId];
    let processedNodes = /* @__PURE__ */ new Set();
    while (queue.length > 0) {
      let currentId = queue.shift();
      if (!currentId || processedNodes.has(currentId))
        continue;
      processedNodes.add(currentId);
      const incomingEdges = edges.filter((edge) => edge.toNode === currentId);
      incomingEdges.forEach((edge) => {
        const ancestor = nodes.find((node) => node.id === edge.fromNode);
        if (ancestor && !processedNodes.has(ancestor.id)) {
          ancestors.push(ancestor);
          queue.push(ancestor.id);
        }
      });
    }
    return ancestors;
  }
  getLongestLineage(nodes, edges, nodeId) {
    let longestLineage = [];
    function findLongestPath(currentId, path) {
      const incomingEdges = edges.filter((edge) => edge.toNode === currentId);
      if (incomingEdges.length === 0) {
        if (path.length > longestLineage.length) {
          longestLineage = path.slice();
        }
        return;
      }
      incomingEdges.forEach((edge) => {
        const ancestor = nodes.find((node) => node.id === edge.fromNode);
        if (ancestor) {
          findLongestPath(ancestor.id, path.concat(ancestor));
        }
      });
    }
    const startNode = nodes.find((node) => node.id === nodeId);
    if (startNode) {
      findLongestPath(nodeId, [startNode]);
    }
    return longestLineage;
  }
  addAIButtonIfNeeded(menuEl) {
    if (!menuEl.querySelector(".gpt-menu-item")) {
      const buttonEl = createEl("button", "clickable-icon gpt-menu-item");
      (0, import_obsidian.setTooltip)(buttonEl, "Sparkle", { placement: "top" });
      (0, import_obsidian.setIcon)(buttonEl, "lucide-sparkles");
      buttonEl.addEventListener("click", async () => {
        var _a2;
        const canvasView = (_a2 = this.app.workspace.getLeavesOfType("canvas").first()) == null ? void 0 : _a2.view;
        const canvas = canvasView.canvas;
        const selection = canvas.selection;
        const selectionIterator = selection.values();
        const node = selectionIterator.next().value;
        const canvas_data = canvas.getData();
        const { edges, nodes } = canvas_data;
        const longest_lineage = this.getLongestLineage(nodes, edges, node.id);
        let conversation = [];
        for (let i = 0; i < longest_lineage.length; i++) {
          const node2 = longest_lineage[i];
          const text = node2.text;
          const userRegex = /<role>User<\/role>/i;
          const assistantRegex = /<role>assistant<\/role>/i;
          if (userRegex.test(text)) {
            const split_text = text.split(userRegex);
            const role = "user";
            const content2 = split_text[1].trim();
            const message = {
              role,
              content: content2
            };
            conversation.push(message);
          }
          if (assistantRegex.test(text)) {
            const split_text = text.split(assistantRegex);
            const role = "assistant";
            const content2 = split_text[1].trim();
            const message = {
              role,
              content: content2
            };
            conversation.push(message);
          }
        }
        conversation.reverse();
        console.log({ conversation });
        const data = {
          conversation
        };
        const model = "llama3-70b-8192";
        const params = {
          messages: conversation,
          model,
          // tools: tools,
          // tool_choice: tool_choice,
          max_tokens: 12e3,
          stop: null
        };
        new import_obsidian.Notice("Calling Groq!");
        const chat_completion = await groq.chat.completions.create(params);
        console.log(chat_completion);
        const content = chat_completion.choices[0].message.content;
        const node_content = `<role>assistant</role>
${content}`;
        const x = node.x + node.width + 200;
        this.childNode(canvas, node, x, node.y, node_content, "right", "left", "groq");
      });
      menuEl.appendChild(buttonEl);
    }
  }
  // Method to insert text into the sidebar
  insertTextIntoSidebar(text) {
    const trimmed_text = text.trim();
    this.app.workspace.iterateAllLeaves((leaf) => {
      if (leaf.view.getViewType() === VIEW_NAME_SIDEBAR_CHAT) {
        const view = leaf.view;
        if (view.textBox) {
          view.textBox.value += trimmed_text;
        }
      }
    });
  }
  // Method to clear text from the sidebar
  clearTextInSidebar() {
    this.app.workspace.iterateAllLeaves((leaf) => {
      if (leaf.view.getViewType() === VIEW_NAME_SIDEBAR_CHAT) {
        const view = leaf.view;
        if (view.textBox) {
          view.textBox.value = "";
        }
        if (view.messagesContainer) {
          view.messagesContainer.innerHTML = "";
        }
      }
    });
  }
  addSidebarTab() {
    this.addRibbonIcon("document", "Open Caret", async (evt) => {
      let main_chat_found = false;
      this.app.workspace.iterateAllLeaves((leaf) => {
        if (leaf.view.getViewType() === VIEW_NAME_MAIN_CHAT) {
          main_chat_found = true;
          if (!leaf.view.containerEl.parentElement.classList.contains("is-active")) {
            this.app.workspace.revealLeaf(leaf);
          }
        }
      });
      if (!main_chat_found) {
        await this.app.workspace.getLeaf(true).setViewState({
          type: VIEW_NAME_MAIN_CHAT,
          active: true
        });
      }
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
